
onDemandTrafficLightsSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000005d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5e  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000896  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ec  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d5  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cc  00000000  00000000  00002dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  74:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <appMain>:

int mode = 0 ;
void appMain()
{
	
	ledInit(PORT_A,0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 0e 01 	call	0x21c	; 0x21c <ledInit>
	ledInit(PORT_A,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 0e 01 	call	0x21c	; 0x21c <ledInit>
	ledInit(PORT_A,2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 0e 01 	call	0x21c	; 0x21c <ledInit>
	ledInit(PORT_B,0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 0e 01 	call	0x21c	; 0x21c <ledInit>
	ledInit(PORT_B,1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 0e 01 	call	0x21c	; 0x21c <ledInit>
	ledInit(PORT_B,2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 0e 01 	call	0x21c	; 0x21c <ledInit>
	
	buttonInit(PORT_D,2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 08 01 	call	0x210	; 0x210 <buttonInit>
	
	buttonInterrupt();
  b4:	0e 94 81 02 	call	0x502	; 0x502 <buttonInterrupt>
	
	
	/* Replace with your application code */
	while (1)
	{
		if(mode == 0)
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	e1 f4       	brne	.+56     	; 0xfc <appMain+0x80>
		{
			ledOn(PORT_A,2);
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 14 01 	call	0x228	; 0x228 <ledOn>
			ledOn(PORT_B,0);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	0e 94 14 01 	call	0x228	; 0x228 <ledOn>
			delayTimer();
  d4:	0e 94 89 02 	call	0x512	; 0x512 <delayTimer>
			ledOff(PORT_A,2);
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
			ledOff(PORT_B,0);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	82 e4       	ldi	r24, 0x42	; 66
  e4:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
			mode++;
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	de cf       	rjmp	.-68     	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 1)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	81 f4       	brne	.+32     	; 0x122 <appMain+0xa6>
		{
			ledToogle(PORT_A,1,PORT_B,1);
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	42 e4       	ldi	r20, 0x42	; 66
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	0e 94 20 01 	call	0x240	; 0x240 <ledToogle>
			mode++;
 10e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 112:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	cb cf       	rjmp	.-106    	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 2)
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	91 05       	cpc	r25, r1
 126:	e1 f4       	brne	.+56     	; 0x160 <appMain+0xe4>
		{
			ledOn(PORT_A,0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 14 01 	call	0x228	; 0x228 <ledOn>
			ledOn(PORT_B,2);
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	0e 94 14 01 	call	0x228	; 0x228 <ledOn>
			delayTimer();
 138:	0e 94 89 02 	call	0x512	; 0x512 <delayTimer>
			ledOff(PORT_A,0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
			ledOff(PORT_B,2);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	82 e4       	ldi	r24, 0x42	; 66
 148:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
			mode++;
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 15e:	ac cf       	rjmp	.-168    	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 3)
 160:	03 97       	sbiw	r24, 0x03	; 3
 162:	09 f0       	breq	.+2      	; 0x166 <appMain+0xea>
 164:	a9 cf       	rjmp	.-174    	; 0xb8 <appMain+0x3c>
		{
			ledToogle(PORT_A,1,PORT_B,1);
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	42 e4       	ldi	r20, 0x42	; 66
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	0e 94 20 01 	call	0x240	; 0x240 <ledToogle>
			mode = 0;
 172:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 176:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	9e cf       	rjmp	.-196    	; 0xb8 <appMain+0x3c>

0000017c <__vector_1>:
		}
	}
}

ISR(__vector_1)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	if(mode == 0 || mode == 3)
 19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	11 f0       	breq	.+4      	; 0x1ae <__vector_1+0x32>
 1aa:	03 97       	sbiw	r24, 0x03	; 3
 1ac:	01 f5       	brne	.+64     	; 0x1ee <__vector_1+0x72>
	{
		ledOff(PORT_A,0);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
		ledOff(PORT_A,1);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
		ledOff(PORT_A,2);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
		ledOff(PORT_B,0);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	82 e4       	ldi	r24, 0x42	; 66
 1ca:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
		ledOff(PORT_B,1);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	82 e4       	ldi	r24, 0x42	; 66
 1d2:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
		ledOff(PORT_B,2);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 1a 01 	call	0x234	; 0x234 <ledOff>
		mode = 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		appMain();
 1ea:	0e 94 3e 00 	call	0x7c	; 0x7c <appMain>
	}
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <buttonInit>:

#include "BUTTON.h"

ButtonReturnState buttonInit(uint8_t portNum , uint8_t buttonNum)
{
	if(DIO_INIT(portNum,buttonNum,IN) == DIO_OK)
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_INIT>
 216:	81 11       	cpse	r24, r1
	{
		return Button_OK;
	}
	return Button_Error_INIT;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	08 95       	ret

0000021c <ledInit>:
 */ 

#include "LED.h"
LEDReturnState ledInit(uint8_t portNum , uint8_t ledNum)
{
	if(DIO_INIT(portNum,ledNum,OUT) == DIO_OK)
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_INIT>
 222:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	return LED_Error_INIT;
 224:	81 e0       	ldi	r24, 0x01	; 1
}
 226:	08 95       	ret

00000228 <ledOn>:
LEDReturnState ledOn(uint8_t portNum , uint8_t ledNum)
{
	if(DIO_Write(portNum,ledNum,HIGH) == DIO_OK)
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
 22e:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	return LED_Error_On;
 230:	82 e0       	ldi	r24, 0x02	; 2
}
 232:	08 95       	ret

00000234 <ledOff>:
LEDReturnState ledOff(uint8_t portNum , uint8_t ledNum)
{
	if(DIO_Write(portNum,ledNum,LOW) == DIO_OK)
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
 23a:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	return LED_Error_Off;
 23c:	83 e0       	ldi	r24, 0x03	; 3
}
 23e:	08 95       	ret

00000240 <ledToogle>:
LEDReturnState ledToogle(uint8_t portNum , uint8_t ledNum,uint8_t portNum1 , uint8_t ledNum1)
{
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	c8 2f       	mov	r28, r24
 24e:	d6 2f       	mov	r29, r22
 250:	14 2f       	mov	r17, r20
 252:	02 2f       	mov	r16, r18
	if(DIO_Write(portNum,ledNum,LOW) == DIO_OK && DIO_Write(portNum1,ledNum1,LOW) == DIO_OK)
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
 25a:	81 11       	cpse	r24, r1
 25c:	2d c0       	rjmp	.+90     	; 0x2b8 <ledToogle+0x78>
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	60 2f       	mov	r22, r16
 262:	81 2f       	mov	r24, r17
 264:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
 268:	88 23       	and	r24, r24
 26a:	f1 f0       	breq	.+60     	; 0x2a8 <ledToogle+0x68>
			DIO_Write(portNum1,ledNum1,LOW);
			toggleTimer();
		}
		return LED_OK;
	}
	return LED_Error_Toggle;
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	25 c0       	rjmp	.+74     	; 0x2ba <ledToogle+0x7a>
{
	if(DIO_Write(portNum,ledNum,LOW) == DIO_OK && DIO_Write(portNum1,ledNum1,LOW) == DIO_OK)
	{
		for(int i = 0 ; i < 10 ; i++)
		{
			DIO_Write(portNum,ledNum,HIGH);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	6d 2f       	mov	r22, r29
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
			DIO_Write(portNum1,ledNum1,HIGH);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	60 2f       	mov	r22, r16
 27e:	81 2f       	mov	r24, r17
 280:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
			toggleTimer();
 284:	0e 94 9f 02 	call	0x53e	; 0x53e <toggleTimer>
			DIO_Write(portNum,ledNum,LOW);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	6d 2f       	mov	r22, r29
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
			DIO_Write(portNum1,ledNum1,LOW);
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	60 2f       	mov	r22, r16
 296:	81 2f       	mov	r24, r17
 298:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_Write>
			toggleTimer();
 29c:	0e 94 9f 02 	call	0x53e	; 0x53e <toggleTimer>
}
LEDReturnState ledToogle(uint8_t portNum , uint8_t ledNum,uint8_t portNum1 , uint8_t ledNum1)
{
	if(DIO_Write(portNum,ledNum,LOW) == DIO_OK && DIO_Write(portNum1,ledNum1,LOW) == DIO_OK)
	{
		for(int i = 0 ; i < 10 ; i++)
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	e8 1a       	sub	r14, r24
 2a4:	f8 0a       	sbc	r15, r24
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <ledToogle+0x6c>
 2a8:	e1 2c       	mov	r14, r1
 2aa:	f1 2c       	mov	r15, r1
 2ac:	8a e0       	ldi	r24, 0x0A	; 10
 2ae:	e8 16       	cp	r14, r24
 2b0:	f1 04       	cpc	r15, r1
 2b2:	f4 f2       	brlt	.-68     	; 0x270 <ledToogle+0x30>
			toggleTimer();
			DIO_Write(portNum,ledNum,LOW);
			DIO_Write(portNum1,ledNum1,LOW);
			toggleTimer();
		}
		return LED_OK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <ledToogle+0x7a>
	}
	return LED_Error_Toggle;
 2b8:	84 e0       	ldi	r24, 0x04	; 4
	
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	08 95       	ret

000002c8 <main>:

void main(void)
{
	while(1)
	{
		appMain();
 2c8:	0e 94 3e 00 	call	0x7c	; 0x7c <appMain>
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <main>

000002ce <DIO_INIT>:



DIOReturnState DIO_INIT(uint8_t portNum , uint8_t pinNum , uint8_t direction)
{
	switch (portNum)
 2ce:	82 34       	cpi	r24, 0x42	; 66
 2d0:	49 f1       	breq	.+82     	; 0x324 <DIO_INIT+0x56>
 2d2:	18 f4       	brcc	.+6      	; 0x2da <DIO_INIT+0xc>
 2d4:	81 34       	cpi	r24, 0x41	; 65
 2d6:	41 f0       	breq	.+16     	; 0x2e8 <DIO_INIT+0x1a>
 2d8:	7d c0       	rjmp	.+250    	; 0x3d4 <DIO_INIT+0x106>
 2da:	83 34       	cpi	r24, 0x43	; 67
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <DIO_INIT+0x12>
 2de:	40 c0       	rjmp	.+128    	; 0x360 <DIO_INIT+0x92>
 2e0:	84 34       	cpi	r24, 0x44	; 68
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <DIO_INIT+0x18>
 2e4:	5a c0       	rjmp	.+180    	; 0x39a <DIO_INIT+0xcc>
 2e6:	76 c0       	rjmp	.+236    	; 0x3d4 <DIO_INIT+0x106>
	{
		case PORT_A:
			if(direction == IN)
 2e8:	41 11       	cpse	r20, r1
 2ea:	0d c0       	rjmp	.+26     	; 0x306 <DIO_INIT+0x38>
			{
				DDRA &=~(1<<pinNum);
 2ec:	2a b3       	in	r18, 0x1a	; 26
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_INIT+0x2a>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_INIT+0x26>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	8a bb       	out	0x1a, r24	; 26
				return DIO_OK;
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
			}
			else if (direction == OUT)
 306:	41 30       	cpi	r20, 0x01	; 1
 308:	09 f0       	breq	.+2      	; 0x30c <DIO_INIT+0x3e>
 30a:	66 c0       	rjmp	.+204    	; 0x3d8 <DIO_INIT+0x10a>
			{
				DDRA |=(1<<pinNum);
 30c:	2a b3       	in	r18, 0x1a	; 26
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_INIT+0x4a>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_INIT+0x46>
 31c:	82 2b       	or	r24, r18
 31e:	8a bb       	out	0x1a, r24	; 26
				return DIO_OK;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
			}
			return DIO_Error_INIT;
		case PORT_B:
			if(direction == IN)
 324:	41 11       	cpse	r20, r1
 326:	0d c0       	rjmp	.+26     	; 0x342 <DIO_INIT+0x74>
			{
				DDRB &=~(1<<pinNum);
 328:	27 b3       	in	r18, 0x17	; 23
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_INIT+0x66>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_INIT+0x62>
 338:	80 95       	com	r24
 33a:	82 23       	and	r24, r18
 33c:	87 bb       	out	0x17, r24	; 23
				return DIO_OK;
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
			}
			else if (direction == OUT)
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	09 f0       	breq	.+2      	; 0x348 <DIO_INIT+0x7a>
 346:	4a c0       	rjmp	.+148    	; 0x3dc <DIO_INIT+0x10e>
			{
				DDRB |=(1<<pinNum);
 348:	27 b3       	in	r18, 0x17	; 23
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_INIT+0x86>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_INIT+0x82>
 358:	82 2b       	or	r24, r18
 35a:	87 bb       	out	0x17, r24	; 23
				return DIO_OK;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
			}
			return DIO_Error_INIT;
		case PORT_C:
			if(direction == IN)
 360:	41 11       	cpse	r20, r1
 362:	0d c0       	rjmp	.+26     	; 0x37e <DIO_INIT+0xb0>
			{
				DDRC &=~(1<<pinNum);
 364:	24 b3       	in	r18, 0x14	; 20
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_INIT+0xa2>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_INIT+0x9e>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	84 bb       	out	0x14, r24	; 20
				return DIO_OK;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret
			}
			else if (direction == OUT)
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	79 f5       	brne	.+94     	; 0x3e0 <DIO_INIT+0x112>
			{
				DDRC |=(1<<pinNum);
 382:	24 b3       	in	r18, 0x14	; 20
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_INIT+0xc0>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_INIT+0xbc>
 392:	82 2b       	or	r24, r18
 394:	84 bb       	out	0x14, r24	; 20
				return DIO_OK;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret
			}
			return DIO_Error_INIT;
		case PORT_D:
			if(direction == IN)
 39a:	41 11       	cpse	r20, r1
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <DIO_INIT+0xea>
			{
				DDRD &=~(1<<pinNum);
 39e:	21 b3       	in	r18, 0x11	; 17
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_INIT+0xdc>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_INIT+0xd8>
 3ae:	80 95       	com	r24
 3b0:	82 23       	and	r24, r18
 3b2:	81 bb       	out	0x11, r24	; 17
				return DIO_OK;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
			}
			else if (direction == OUT)
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	a1 f4       	brne	.+40     	; 0x3e4 <DIO_INIT+0x116>
			{
				DDRD |=(1<<pinNum);
 3bc:	21 b3       	in	r18, 0x11	; 17
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_INIT+0xfa>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_INIT+0xf6>
 3cc:	82 2b       	or	r24, r18
 3ce:	81 bb       	out	0x11, r24	; 17
				return DIO_OK;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
			}
			return DIO_Error_INIT;
		default:
			return DIO_Error_INIT;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	08 95       	ret
			else if (direction == OUT)
			{
				DDRA |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_INIT;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	08 95       	ret
			else if (direction == OUT)
			{
				DDRB |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_INIT;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	08 95       	ret
			else if (direction == OUT)
			{
				DDRC |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_INIT;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret
			else if (direction == OUT)
			{
				DDRD |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_INIT;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
		default:
			return DIO_Error_INIT;
	}
}
 3e6:	08 95       	ret

000003e8 <DIO_Write>:

DIOReturnState DIO_Write(uint8_t portNum , uint8_t pinNum , uint8_t value)
{
	switch (portNum)
 3e8:	82 34       	cpi	r24, 0x42	; 66
 3ea:	49 f1       	breq	.+82     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3ec:	18 f4       	brcc	.+6      	; 0x3f4 <DIO_Write+0xc>
 3ee:	81 34       	cpi	r24, 0x41	; 65
 3f0:	41 f0       	breq	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f2:	7d c0       	rjmp	.+250    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 3f4:	83 34       	cpi	r24, 0x43	; 67
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_Write+0x12>
 3f8:	40 c0       	rjmp	.+128    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 3fa:	84 34       	cpi	r24, 0x44	; 68
 3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	5a c0       	rjmp	.+180    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 400:	76 c0       	rjmp	.+236    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
	{
		case PORT_A:
			if(value == LOW)
 402:	41 11       	cpse	r20, r1
 404:	0d c0       	rjmp	.+26     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			{
				PORTA &=~(1<<pinNum);
 406:	2b b3       	in	r18, 0x1b	; 27
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	8b bb       	out	0x1b, r24	; 27
				return DIO_OK;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
			}
			else if (value == HIGH)
 420:	41 30       	cpi	r20, 0x01	; 1
 422:	09 f0       	breq	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	66 c0       	rjmp	.+204    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
			{
				PORTA |=(1<<pinNum);
 426:	2b b3       	in	r18, 0x1b	; 27
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	82 2b       	or	r24, r18
 438:	8b bb       	out	0x1b, r24	; 27
				return DIO_OK;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
			}
			return DIO_Error_Write;
		case PORT_B:
			if(value == LOW)
 43e:	41 11       	cpse	r20, r1
 440:	0d c0       	rjmp	.+26     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			{
				PORTB &=~(1<<pinNum);
 442:	28 b3       	in	r18, 0x18	; 24
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	88 bb       	out	0x18, r24	; 24
				return DIO_OK;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
			}
			else if (value == HIGH)
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	09 f0       	breq	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 460:	4a c0       	rjmp	.+148    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				PORTB |=(1<<pinNum);
 462:	28 b3       	in	r18, 0x18	; 24
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	82 2b       	or	r24, r18
 474:	88 bb       	out	0x18, r24	; 24
				return DIO_OK;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
			}
			return DIO_Error_Write;
		case PORT_C:
			if(value == LOW)
 47a:	41 11       	cpse	r20, r1
 47c:	0d c0       	rjmp	.+26     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				PORTC &=~(1<<pinNum);
 47e:	25 b3       	in	r18, 0x15	; 21
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	85 bb       	out	0x15, r24	; 21
				return DIO_OK;
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
			}
			else if (value == HIGH)
 498:	41 30       	cpi	r20, 0x01	; 1
 49a:	79 f5       	brne	.+94     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			{
				PORTC |=(1<<pinNum);
 49c:	25 b3       	in	r18, 0x15	; 21
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4ac:	82 2b       	or	r24, r18
 4ae:	85 bb       	out	0x15, r24	; 21
				return DIO_OK;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
			}
			return DIO_Error_Write;
		case PORT_D:
			if(value == LOW)
 4b4:	41 11       	cpse	r20, r1
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
			{
				PORTD &=~(1<<pinNum);
 4b8:	22 b3       	in	r18, 0x12	; 18
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c8:	80 95       	com	r24
 4ca:	82 23       	and	r24, r18
 4cc:	82 bb       	out	0x12, r24	; 18
				return DIO_OK;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
			}
			else if (value == HIGH)
 4d2:	41 30       	cpi	r20, 0x01	; 1
 4d4:	a1 f4       	brne	.+40     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
			{
				PORTD |=(1<<pinNum);
 4d6:	22 b3       	in	r18, 0x12	; 18
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4e6:	82 2b       	or	r24, r18
 4e8:	82 bb       	out	0x12, r24	; 18
				return DIO_OK;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
			}
			return DIO_Error_Write;
		default:
			return DIO_Error_Write;
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	08 95       	ret
			else if (value == HIGH)
			{
				PORTA |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_Write;
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	08 95       	ret
			else if (value == HIGH)
			{
				PORTB |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_Write;
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	08 95       	ret
			else if (value == HIGH)
			{
				PORTC |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_Write;
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	08 95       	ret
			else if (value == HIGH)
			{
				PORTD |=(1<<pinNum);
				return DIO_OK;
			}
			return DIO_Error_Write;
 4fe:	82 e0       	ldi	r24, 0x02	; 2
		default:
			return DIO_Error_Write;
	}
}
 500:	08 95       	ret

00000502 <buttonInterrupt>:

#include "INTERRUPT.h"

void buttonInterrupt()
{
	Enable_Global_Interrupt();
 502:	78 94       	sei
	MCUCR |= (1<<1);
 504:	85 b7       	in	r24, 0x35	; 53
 506:	82 60       	ori	r24, 0x02	; 2
 508:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<6);
 50a:	8b b7       	in	r24, 0x3b	; 59
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	8b bf       	out	0x3b, r24	; 59
 510:	08 95       	ret

00000512 <delayTimer>:
#include "TIMER.h"

void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
 512:	83 b7       	in	r24, 0x33	; 51
 514:	85 60       	ori	r24, 0x05	; 5
 516:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 245;
 518:	85 ef       	ldi	r24, 0xF5	; 245
 51a:	82 bf       	out	0x32, r24	; 50

#include "TIMER.h"

void delayTimer()
{
	int overFlowCounter = 0;
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 520:	09 c0       	rjmp	.+18     	; 0x534 <delayTimer+0x22>
	{
		while ((TIFR & (1<<0)) == 0);
 522:	08 b6       	in	r0, 0x38	; 56
 524:	00 fe       	sbrs	r0, 0
 526:	fd cf       	rjmp	.-6      	; 0x522 <delayTimer+0x10>
		TIFR |= (1<<0);
 528:	88 b7       	in	r24, 0x38	; 56
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	88 bf       	out	0x38, r24	; 56
		overFlowCounter++;
 52e:	2f 5f       	subi	r18, 0xFF	; 255
 530:	3f 4f       	sbci	r19, 0xFF	; 255
		TCNT0 = 0;
 532:	12 be       	out	0x32, r1	; 50
void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 534:	24 31       	cpi	r18, 0x14	; 20
 536:	31 05       	cpc	r19, r1
 538:	a4 f3       	brlt	.-24     	; 0x522 <delayTimer+0x10>
		while ((TIFR & (1<<0)) == 0);
		TIFR |= (1<<0);
		overFlowCounter++;
		TCNT0 = 0;
	}
	TCCR0 = 0x00;
 53a:	13 be       	out	0x33, r1	; 51
 53c:	08 95       	ret

0000053e <toggleTimer>:
}

void toggleTimer()
{
	TCCR0 |= (1 << 2)|(1 << 0);
 53e:	83 b7       	in	r24, 0x33	; 51
 540:	85 60       	ori	r24, 0x05	; 5
 542:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 11.859375;
 544:	8b e0       	ldi	r24, 0x0B	; 11
 546:	82 bf       	out	0x32, r24	; 50
	while ((TIFR & (1<<0)) == 0);
 548:	08 b6       	in	r0, 0x38	; 56
 54a:	00 fe       	sbrs	r0, 0
 54c:	fd cf       	rjmp	.-6      	; 0x548 <toggleTimer+0xa>
	TIFR |= (1<<0);
 54e:	88 b7       	in	r24, 0x38	; 56
 550:	81 60       	ori	r24, 0x01	; 1
 552:	88 bf       	out	0x38, r24	; 56
	TCCR0 = 0x00;
 554:	13 be       	out	0x33, r1	; 51
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>


onDemandTrafficLightsSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000adc  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a6  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000541  00000000  00000000  000016a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  74:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ledInit>:

#include "LED.h"
int tempReturnLEDStatusValue;
void ledInit(uint8_t portNum , uint8_t ledNum)
{
	DIO_INIT(portNum,ledNum,OUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <DIO_INIT>
  82:	08 95       	ret

00000084 <ledOn>:
}
void ledOn(uint8_t portNum , uint8_t ledNum)
{
	DIO_Write(portNum,ledNum,HIGH);
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_Write>
  8a:	08 95       	ret

0000008c <ledOff>:
}
void ledOff(uint8_t portNum , uint8_t ledNum)
{
	DIO_Write(portNum,ledNum,LOW);
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_Write>
  92:	08 95       	ret

00000094 <main>:
int mode = 0 ;
int main(void)
{
	int counter = 0;
	
	ledInit(PORT_A,0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 3e 00 	call	0x7c	; 0x7c <ledInit>
	ledInit(PORT_A,1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 3e 00 	call	0x7c	; 0x7c <ledInit>
	ledInit(PORT_A,2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 3e 00 	call	0x7c	; 0x7c <ledInit>
	ledInit(PORT_B,0);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 3e 00 	call	0x7c	; 0x7c <ledInit>
	ledInit(PORT_B,1);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	0e 94 3e 00 	call	0x7c	; 0x7c <ledInit>
	ledInit(PORT_B,2);
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	82 e4       	ldi	r24, 0x42	; 66
  c0:	0e 94 3e 00 	call	0x7c	; 0x7c <ledInit>
	
	sei();
  c4:	78 94       	sei
	MCUCR |= (1<<ISC00) | (1<<ISC01);
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8b bf       	out	0x3b, r24	; 59
	
	
    /* Replace with your application code */
    while (1) 
    {
		switch(mode)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  da:	89 2b       	or	r24, r25
  dc:	d1 f7       	brne	.-12     	; 0xd2 <main+0x3e>
		{
			case 0:
				counter = 0;
				ledOff(PORT_B,1);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOff(PORT_A,1);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOn(PORT_A,0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				ledOn(PORT_B,2);
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				delayTimer();
  fe:	0e 94 cc 00 	call	0x198	; 0x198 <delayTimer>
				counter++;
				ledOff(PORT_A,0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOff(PORT_B,2);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOn(PORT_A,1);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				ledOn(PORT_B,1);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	82 e4       	ldi	r24, 0x42	; 66
 11e:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				counter++;
				delayTimer();
 122:	0e 94 cc 00 	call	0x198	; 0x198 <delayTimer>
				ledOff(PORT_A,1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOff(PORT_B,1);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	82 e4       	ldi	r24, 0x42	; 66
 132:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOn(PORT_A,2);
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				ledOn(PORT_B,0);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	82 e4       	ldi	r24, 0x42	; 66
 142:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				counter++;
				delayTimer();
 146:	0e 94 cc 00 	call	0x198	; 0x198 <delayTimer>
				ledOff(PORT_A,2);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOff(PORT_B,0);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	82 e4       	ldi	r24, 0x42	; 66
 156:	0e 94 46 00 	call	0x8c	; 0x8c <ledOff>
				ledOn(PORT_A,1);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				ledOn(PORT_B,1);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	82 e4       	ldi	r24, 0x42	; 66
 166:	0e 94 42 00 	call	0x84	; 0x84 <ledOn>
				delayTimer();
 16a:	0e 94 cc 00 	call	0x198	; 0x198 <delayTimer>
				counter++;
			break;
 16e:	b1 cf       	rjmp	.-158    	; 0xd2 <main+0x3e>

00000170 <__vector_1>:
		}
    }
}

ISR(INT0_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	mode = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <delayTimer>:
#define numberOfOverFlows 20

void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	85 60       	ori	r24, 0x05	; 5
 19c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 245;
 19e:	85 ef       	ldi	r24, 0xF5	; 245
 1a0:	82 bf       	out	0x32, r24	; 50

#define numberOfOverFlows 20

void delayTimer()
{
	int overFlowCounter = 0;
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <delayTimer+0x22>
	{
		while ((TIFR & (1<<0)) == 0);
 1a8:	08 b6       	in	r0, 0x38	; 56
 1aa:	00 fe       	sbrs	r0, 0
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <delayTimer+0x10>
		TIFR |= (1<<0);
 1ae:	88 b7       	in	r24, 0x38	; 56
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	88 bf       	out	0x38, r24	; 56
		overFlowCounter++;
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
		TCNT0 = 0;
 1b8:	12 be       	out	0x32, r1	; 50
void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 1ba:	24 31       	cpi	r18, 0x14	; 20
 1bc:	31 05       	cpc	r19, r1
 1be:	a4 f3       	brlt	.-24     	; 0x1a8 <delayTimer+0x10>
		while ((TIFR & (1<<0)) == 0);
		TIFR |= (1<<0);
		overFlowCounter++;
		TCNT0 = 0;
	}
	TCCR0 = 0x00;
 1c0:	13 be       	out	0x33, r1	; 51
 1c2:	08 95       	ret

000001c4 <DIO_INIT>:
}
void DIO_INIT(uint8_t portNum , uint8_t pinNum , uint8_t direction)
{
	switch (portNum)
 1c4:	82 34       	cpi	r24, 0x42	; 66
 1c6:	31 f1       	breq	.+76     	; 0x214 <DIO_INIT+0x50>
 1c8:	18 f4       	brcc	.+6      	; 0x1d0 <DIO_INIT+0xc>
 1ca:	81 34       	cpi	r24, 0x41	; 65
 1cc:	39 f0       	breq	.+14     	; 0x1dc <DIO_INIT+0x18>
 1ce:	08 95       	ret
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	e1 f1       	breq	.+120    	; 0x24c <DIO_INIT+0x88>
 1d4:	84 34       	cpi	r24, 0x44	; 68
 1d6:	09 f4       	brne	.+2      	; 0x1da <DIO_INIT+0x16>
 1d8:	54 c0       	rjmp	.+168    	; 0x282 <DIO_INIT+0xbe>
 1da:	08 95       	ret
	{
		case PORT_A:
			if(direction == IN)
 1dc:	41 11       	cpse	r20, r1
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <DIO_INIT+0x34>
			{
				DDRA &=~(1<<pinNum);
 1e0:	2a b3       	in	r18, 0x1a	; 26
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_INIT+0x28>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_INIT+0x24>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8a bb       	out	0x1a, r24	; 26
 1f6:	08 95       	ret
			}
			else if (direction == OUT)
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_INIT+0x3a>
 1fc:	5c c0       	rjmp	.+184    	; 0x2b6 <DIO_INIT+0xf2>
			{
				DDRA |=(1<<pinNum);
 1fe:	2a b3       	in	r18, 0x1a	; 26
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_INIT+0x46>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_INIT+0x42>
 20e:	82 2b       	or	r24, r18
 210:	8a bb       	out	0x1a, r24	; 26
 212:	08 95       	ret
			}
			break;
		case PORT_B:
			if(direction == IN)
 214:	41 11       	cpse	r20, r1
 216:	0c c0       	rjmp	.+24     	; 0x230 <DIO_INIT+0x6c>
			{
				DDRB &=~(1<<pinNum);
 218:	27 b3       	in	r18, 0x17	; 23
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_INIT+0x60>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_INIT+0x5c>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	87 bb       	out	0x17, r24	; 23
 22e:	08 95       	ret
			}
			else if (direction == OUT)
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <DIO_INIT+0x72>
 234:	40 c0       	rjmp	.+128    	; 0x2b6 <DIO_INIT+0xf2>
			{
				DDRB |=(1<<pinNum);
 236:	27 b3       	in	r18, 0x17	; 23
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_INIT+0x7e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_INIT+0x7a>
 246:	82 2b       	or	r24, r18
 248:	87 bb       	out	0x17, r24	; 23
 24a:	08 95       	ret
			}
			break;
		case PORT_C:
			if(direction == IN)
 24c:	41 11       	cpse	r20, r1
 24e:	0c c0       	rjmp	.+24     	; 0x268 <DIO_INIT+0xa4>
			{
				DDRC &=~(1<<pinNum);
 250:	24 b3       	in	r18, 0x14	; 20
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_INIT+0x98>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_INIT+0x94>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
			}
			else if (direction == OUT)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	29 f5       	brne	.+74     	; 0x2b6 <DIO_INIT+0xf2>
			{
				DDRC |=(1<<pinNum);
 26c:	24 b3       	in	r18, 0x14	; 20
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_INIT+0xb4>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_INIT+0xb0>
 27c:	82 2b       	or	r24, r18
 27e:	84 bb       	out	0x14, r24	; 20
 280:	08 95       	ret
			}
			break;
		case PORT_D:
			if(direction == IN)
 282:	41 11       	cpse	r20, r1
 284:	0c c0       	rjmp	.+24     	; 0x29e <DIO_INIT+0xda>
			{
				DDRD &=~(1<<pinNum);
 286:	21 b3       	in	r18, 0x11	; 17
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_INIT+0xce>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_INIT+0xca>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	81 bb       	out	0x11, r24	; 17
 29c:	08 95       	ret
			}
			else if (direction == OUT)
 29e:	41 30       	cpi	r20, 0x01	; 1
 2a0:	51 f4       	brne	.+20     	; 0x2b6 <DIO_INIT+0xf2>
			{
				DDRD |=(1<<pinNum);
 2a2:	21 b3       	in	r18, 0x11	; 17
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_INIT+0xea>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_INIT+0xe6>
 2b2:	82 2b       	or	r24, r18
 2b4:	81 bb       	out	0x11, r24	; 17
 2b6:	08 95       	ret

000002b8 <DIO_Write>:
			break;
	}
}
void DIO_Write(uint8_t portNum , uint8_t pinNum , uint8_t value)
{
	switch (portNum)
 2b8:	82 34       	cpi	r24, 0x42	; 66
 2ba:	31 f1       	breq	.+76     	; 0x308 <DIO_Write+0x50>
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <DIO_Write+0xc>
 2be:	81 34       	cpi	r24, 0x41	; 65
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <DIO_Write+0x18>
 2c2:	08 95       	ret
 2c4:	83 34       	cpi	r24, 0x43	; 67
 2c6:	e1 f1       	breq	.+120    	; 0x340 <DIO_Write+0x88>
 2c8:	84 34       	cpi	r24, 0x44	; 68
 2ca:	09 f4       	brne	.+2      	; 0x2ce <DIO_Write+0x16>
 2cc:	54 c0       	rjmp	.+168    	; 0x376 <DIO_Write+0xbe>
 2ce:	08 95       	ret
	{
		case PORT_A:
			if(value == LOW)
 2d0:	41 11       	cpse	r20, r1
 2d2:	0c c0       	rjmp	.+24     	; 0x2ec <DIO_Write+0x34>
			{
				PORTA &=~(1<<pinNum);
 2d4:	2b b3       	in	r18, 0x1b	; 27
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_Write+0x28>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_Write+0x24>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	08 95       	ret
			}
			else if (value == HIGH)
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <DIO_Write+0x3a>
 2f0:	5c c0       	rjmp	.+184    	; 0x3aa <DIO_Write+0xf2>
			{
				PORTA |=(1<<pinNum);
 2f2:	2b b3       	in	r18, 0x1b	; 27
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_Write+0x46>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_Write+0x42>
 302:	82 2b       	or	r24, r18
 304:	8b bb       	out	0x1b, r24	; 27
 306:	08 95       	ret
			}
			break;
		case PORT_B:
			if(value == LOW)
 308:	41 11       	cpse	r20, r1
 30a:	0c c0       	rjmp	.+24     	; 0x324 <DIO_Write+0x6c>
			{
				PORTB &=~(1<<pinNum);
 30c:	28 b3       	in	r18, 0x18	; 24
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_Write+0x60>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_Write+0x5c>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	88 bb       	out	0x18, r24	; 24
 322:	08 95       	ret
			}
			else if (value == HIGH)
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	09 f0       	breq	.+2      	; 0x32a <DIO_Write+0x72>
 328:	40 c0       	rjmp	.+128    	; 0x3aa <DIO_Write+0xf2>
			{
				PORTB |=(1<<pinNum);
 32a:	28 b3       	in	r18, 0x18	; 24
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_Write+0x7e>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_Write+0x7a>
 33a:	82 2b       	or	r24, r18
 33c:	88 bb       	out	0x18, r24	; 24
 33e:	08 95       	ret
			}
			break;
		case PORT_C:
			if(value == LOW)
 340:	41 11       	cpse	r20, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <DIO_Write+0xa4>
			{
				PORTC &=~(1<<pinNum);
 344:	25 b3       	in	r18, 0x15	; 21
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_Write+0x98>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_Write+0x94>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	85 bb       	out	0x15, r24	; 21
 35a:	08 95       	ret
			}
			else if (value == HIGH)
 35c:	41 30       	cpi	r20, 0x01	; 1
 35e:	29 f5       	brne	.+74     	; 0x3aa <DIO_Write+0xf2>
			{
				PORTC |=(1<<pinNum);
 360:	25 b3       	in	r18, 0x15	; 21
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_Write+0xb4>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_Write+0xb0>
 370:	82 2b       	or	r24, r18
 372:	85 bb       	out	0x15, r24	; 21
 374:	08 95       	ret
			}
			break;
		case PORT_D:
			if(value == LOW)
 376:	41 11       	cpse	r20, r1
 378:	0c c0       	rjmp	.+24     	; 0x392 <DIO_Write+0xda>
			{
				PORTD &=~(1<<pinNum);
 37a:	22 b3       	in	r18, 0x12	; 18
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_Write+0xce>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_Write+0xca>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	82 bb       	out	0x12, r24	; 18
 390:	08 95       	ret
			}
			else if (value == HIGH)
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	51 f4       	brne	.+20     	; 0x3aa <DIO_Write+0xf2>
			{
				PORTD |=(1<<pinNum);
 396:	22 b3       	in	r18, 0x12	; 18
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_Write+0xea>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_Write+0xe6>
 3a6:	82 2b       	or	r24, r18
 3a8:	82 bb       	out	0x12, r24	; 18
 3aa:	08 95       	ret

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>

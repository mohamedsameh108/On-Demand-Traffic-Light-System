
onDemandTrafficLightsSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9d  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e0  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  00001ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  0000223c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000397  00000000  00000000  000027ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002b51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  74:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <appMain>:

int mode = 0 ;
void appMain()
{
	
	ledInit(PORT_A,0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 23 01 	call	0x246	; 0x246 <ledInit>
	ledInit(PORT_A,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 23 01 	call	0x246	; 0x246 <ledInit>
	ledInit(PORT_A,2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 23 01 	call	0x246	; 0x246 <ledInit>
	ledInit(PORT_B,0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 23 01 	call	0x246	; 0x246 <ledInit>
	ledInit(PORT_B,1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 23 01 	call	0x246	; 0x246 <ledInit>
	ledInit(PORT_B,2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 23 01 	call	0x246	; 0x246 <ledInit>
	
	buttonInit(PORT_D,2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 1f 01 	call	0x23e	; 0x23e <buttonInit>
	
	buttonInterrupt();
  b4:	0e 94 26 02 	call	0x44c	; 0x44c <buttonInterrupt>
	
	
	/* Replace with your application code */
	while (1)
	{
		if(mode == 0)
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	e1 f4       	brne	.+56     	; 0xfc <appMain+0x80>
		{
			ledOn(PORT_A,0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			ledOn(PORT_B,2);
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			delayTimer();
  d4:	0e 94 2e 02 	call	0x45c	; 0x45c <delayTimer>
			ledOff(PORT_A,0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			ledOff(PORT_B,2);
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	82 e4       	ldi	r24, 0x42	; 66
  e4:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			mode++;
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	de cf       	rjmp	.-68     	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 1)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	e1 f4       	brne	.+56     	; 0x13a <appMain+0xbe>
		{
			ledOn(PORT_A,1);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			ledOn(PORT_B,1);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			delayTimer();
 112:	0e 94 2e 02 	call	0x45c	; 0x45c <delayTimer>
			ledOff(PORT_A,1);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			ledOff(PORT_B,1);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e4       	ldi	r24, 0x42	; 66
 122:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			mode++;
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	bf cf       	rjmp	.-130    	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 2)
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	91 05       	cpc	r25, r1
 13e:	e1 f4       	brne	.+56     	; 0x178 <appMain+0xfc>
		{
			ledOn(PORT_A,2);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			ledOn(PORT_B,0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	82 e4       	ldi	r24, 0x42	; 66
 14c:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			delayTimer();
 150:	0e 94 2e 02 	call	0x45c	; 0x45c <delayTimer>
			ledOff(PORT_A,2);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			ledOff(PORT_B,0);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	82 e4       	ldi	r24, 0x42	; 66
 160:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			mode++;
 164:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 168:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 176:	a0 cf       	rjmp	.-192    	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 3)
 178:	03 97       	sbiw	r24, 0x03	; 3
 17a:	09 f0       	breq	.+2      	; 0x17e <appMain+0x102>
 17c:	9d cf       	rjmp	.-198    	; 0xb8 <appMain+0x3c>
		{
			ledOn(PORT_A,1);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	81 e4       	ldi	r24, 0x41	; 65
 182:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			ledOn(PORT_B,1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	82 e4       	ldi	r24, 0x42	; 66
 18a:	0e 94 27 01 	call	0x24e	; 0x24e <ledOn>
			delayTimer();
 18e:	0e 94 2e 02 	call	0x45c	; 0x45c <delayTimer>
			ledOff(PORT_A,1);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			ledOff(PORT_B,1);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	82 e4       	ldi	r24, 0x42	; 66
 19e:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
			mode = 0;
 1a2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1aa:	86 cf       	rjmp	.-244    	; 0xb8 <appMain+0x3c>

000001ac <__vector_1>:
		}
	}
}

ISR(__vector_1)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	if(mode == 1 || mode == 2)
 1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	02 97       	sbiw	r24, 0x02	; 2
 1da:	00 f5       	brcc	.+64     	; 0x21c <__vector_1+0x70>
	{
		ledOff(PORT_A,0);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
		ledOff(PORT_A,1);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
		ledOff(PORT_A,2);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
		ledOff(PORT_B,0);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	82 e4       	ldi	r24, 0x42	; 66
 1f8:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
		ledOff(PORT_B,1);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	82 e4       	ldi	r24, 0x42	; 66
 200:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
		ledOff(PORT_B,2);
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	82 e4       	ldi	r24, 0x42	; 66
 208:	0e 94 2b 01 	call	0x256	; 0x256 <ledOff>
		mode = 3;
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		appMain();
 218:	0e 94 3e 00 	call	0x7c	; 0x7c <appMain>
	}
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <buttonInit>:

#include "BUTTON.h"

void buttonInit(uint8_t portNum , uint8_t buttonNum)
{
	DIO_INIT(portNum,buttonNum,IN);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	0e 94 32 01 	call	0x264	; 0x264 <DIO_INIT>
 244:	08 95       	ret

00000246 <ledInit>:
 */ 

#include "LED.h"
void ledInit(uint8_t portNum , uint8_t ledNum)
{
	DIO_INIT(portNum,ledNum,OUT);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	0e 94 32 01 	call	0x264	; 0x264 <DIO_INIT>
 24c:	08 95       	ret

0000024e <ledOn>:
}
void ledOn(uint8_t portNum , uint8_t ledNum)
{
	DIO_Write(portNum,ledNum,HIGH);
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	0e 94 ac 01 	call	0x358	; 0x358 <DIO_Write>
 254:	08 95       	ret

00000256 <ledOff>:
}
void ledOff(uint8_t portNum , uint8_t ledNum)
{
	DIO_Write(portNum,ledNum,LOW);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	0e 94 ac 01 	call	0x358	; 0x358 <DIO_Write>
 25c:	08 95       	ret

0000025e <main>:

int main(void)
{
	while(1)
	{
		appMain();
 25e:	0e 94 3e 00 	call	0x7c	; 0x7c <appMain>
 262:	fd cf       	rjmp	.-6      	; 0x25e <main>

00000264 <DIO_INIT>:



void DIO_INIT(uint8_t portNum , uint8_t pinNum , uint8_t direction)
{
	switch (portNum)
 264:	82 34       	cpi	r24, 0x42	; 66
 266:	31 f1       	breq	.+76     	; 0x2b4 <DIO_INIT+0x50>
 268:	18 f4       	brcc	.+6      	; 0x270 <DIO_INIT+0xc>
 26a:	81 34       	cpi	r24, 0x41	; 65
 26c:	39 f0       	breq	.+14     	; 0x27c <DIO_INIT+0x18>
 26e:	08 95       	ret
 270:	83 34       	cpi	r24, 0x43	; 67
 272:	e1 f1       	breq	.+120    	; 0x2ec <DIO_INIT+0x88>
 274:	84 34       	cpi	r24, 0x44	; 68
 276:	09 f4       	brne	.+2      	; 0x27a <DIO_INIT+0x16>
 278:	54 c0       	rjmp	.+168    	; 0x322 <DIO_INIT+0xbe>
 27a:	08 95       	ret
	{
		case PORT_A:
			if(direction == IN)
 27c:	41 11       	cpse	r20, r1
 27e:	0c c0       	rjmp	.+24     	; 0x298 <DIO_INIT+0x34>
			{
				DDRA &=~(1<<pinNum);
 280:	2a b3       	in	r18, 0x1a	; 26
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_INIT+0x28>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_INIT+0x24>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	8a bb       	out	0x1a, r24	; 26
 296:	08 95       	ret
			}
			else if (direction == OUT)
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <DIO_INIT+0x3a>
 29c:	5c c0       	rjmp	.+184    	; 0x356 <DIO_INIT+0xf2>
			{
				DDRA |=(1<<pinNum);
 29e:	2a b3       	in	r18, 0x1a	; 26
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_INIT+0x46>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_INIT+0x42>
 2ae:	82 2b       	or	r24, r18
 2b0:	8a bb       	out	0x1a, r24	; 26
 2b2:	08 95       	ret
			}
			break;
		case PORT_B:
			if(direction == IN)
 2b4:	41 11       	cpse	r20, r1
 2b6:	0c c0       	rjmp	.+24     	; 0x2d0 <DIO_INIT+0x6c>
			{
				DDRB &=~(1<<pinNum);
 2b8:	27 b3       	in	r18, 0x17	; 23
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_INIT+0x60>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_INIT+0x5c>
 2c8:	80 95       	com	r24
 2ca:	82 23       	and	r24, r18
 2cc:	87 bb       	out	0x17, r24	; 23
 2ce:	08 95       	ret
			}
			else if (direction == OUT)
 2d0:	41 30       	cpi	r20, 0x01	; 1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <DIO_INIT+0x72>
 2d4:	40 c0       	rjmp	.+128    	; 0x356 <DIO_INIT+0xf2>
			{
				DDRB |=(1<<pinNum);
 2d6:	27 b3       	in	r18, 0x17	; 23
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_INIT+0x7e>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_INIT+0x7a>
 2e6:	82 2b       	or	r24, r18
 2e8:	87 bb       	out	0x17, r24	; 23
 2ea:	08 95       	ret
			}
			break;
		case PORT_C:
			if(direction == IN)
 2ec:	41 11       	cpse	r20, r1
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_INIT+0xa4>
			{
				DDRC &=~(1<<pinNum);
 2f0:	24 b3       	in	r18, 0x14	; 20
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_INIT+0x98>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_INIT+0x94>
 300:	80 95       	com	r24
 302:	82 23       	and	r24, r18
 304:	84 bb       	out	0x14, r24	; 20
 306:	08 95       	ret
			}
			else if (direction == OUT)
 308:	41 30       	cpi	r20, 0x01	; 1
 30a:	29 f5       	brne	.+74     	; 0x356 <DIO_INIT+0xf2>
			{
				DDRC |=(1<<pinNum);
 30c:	24 b3       	in	r18, 0x14	; 20
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_INIT+0xb4>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_INIT+0xb0>
 31c:	82 2b       	or	r24, r18
 31e:	84 bb       	out	0x14, r24	; 20
 320:	08 95       	ret
			}
			break;
		case PORT_D:
			if(direction == IN)
 322:	41 11       	cpse	r20, r1
 324:	0c c0       	rjmp	.+24     	; 0x33e <DIO_INIT+0xda>
			{
				DDRD &=~(1<<pinNum);
 326:	21 b3       	in	r18, 0x11	; 17
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_INIT+0xce>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_INIT+0xca>
 336:	80 95       	com	r24
 338:	82 23       	and	r24, r18
 33a:	81 bb       	out	0x11, r24	; 17
 33c:	08 95       	ret
			}
			else if (direction == OUT)
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	51 f4       	brne	.+20     	; 0x356 <DIO_INIT+0xf2>
			{
				DDRD |=(1<<pinNum);
 342:	21 b3       	in	r18, 0x11	; 17
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_INIT+0xea>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_INIT+0xe6>
 352:	82 2b       	or	r24, r18
 354:	81 bb       	out	0x11, r24	; 17
 356:	08 95       	ret

00000358 <DIO_Write>:
	}
}

void DIO_Write(uint8_t portNum , uint8_t pinNum , uint8_t value)
{
	switch (portNum)
 358:	82 34       	cpi	r24, 0x42	; 66
 35a:	31 f1       	breq	.+76     	; 0x3a8 <DIO_Write+0x50>
 35c:	18 f4       	brcc	.+6      	; 0x364 <DIO_Write+0xc>
 35e:	81 34       	cpi	r24, 0x41	; 65
 360:	39 f0       	breq	.+14     	; 0x370 <DIO_Write+0x18>
 362:	08 95       	ret
 364:	83 34       	cpi	r24, 0x43	; 67
 366:	e1 f1       	breq	.+120    	; 0x3e0 <DIO_Write+0x88>
 368:	84 34       	cpi	r24, 0x44	; 68
 36a:	09 f4       	brne	.+2      	; 0x36e <DIO_Write+0x16>
 36c:	54 c0       	rjmp	.+168    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 36e:	08 95       	ret
	{
		case PORT_A:
			if(value == LOW)
 370:	41 11       	cpse	r20, r1
 372:	0c c0       	rjmp	.+24     	; 0x38c <DIO_Write+0x34>
			{
				PORTA &=~(1<<pinNum);
 374:	2b b3       	in	r18, 0x1b	; 27
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_Write+0x28>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_Write+0x24>
 384:	80 95       	com	r24
 386:	82 23       	and	r24, r18
 388:	8b bb       	out	0x1b, r24	; 27
 38a:	08 95       	ret
			}
			else if (value == HIGH)
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	09 f0       	breq	.+2      	; 0x392 <DIO_Write+0x3a>
 390:	5c c0       	rjmp	.+184    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			{
				PORTA |=(1<<pinNum);
 392:	2b b3       	in	r18, 0x1b	; 27
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_Write+0x46>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_Write+0x42>
 3a2:	82 2b       	or	r24, r18
 3a4:	8b bb       	out	0x1b, r24	; 27
 3a6:	08 95       	ret
			}
			break;
		case PORT_B:
			if(value == LOW)
 3a8:	41 11       	cpse	r20, r1
 3aa:	0c c0       	rjmp	.+24     	; 0x3c4 <DIO_Write+0x6c>
			{
				PORTB &=~(1<<pinNum);
 3ac:	28 b3       	in	r18, 0x18	; 24
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_Write+0x60>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_Write+0x5c>
 3bc:	80 95       	com	r24
 3be:	82 23       	and	r24, r18
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	08 95       	ret
			}
			else if (value == HIGH)
 3c4:	41 30       	cpi	r20, 0x01	; 1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <DIO_Write+0x72>
 3c8:	40 c0       	rjmp	.+128    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			{
				PORTB |=(1<<pinNum);
 3ca:	28 b3       	in	r18, 0x18	; 24
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_Write+0x7e>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_Write+0x7a>
 3da:	82 2b       	or	r24, r18
 3dc:	88 bb       	out	0x18, r24	; 24
 3de:	08 95       	ret
			}
			break;
		case PORT_C:
			if(value == LOW)
 3e0:	41 11       	cpse	r20, r1
 3e2:	0c c0       	rjmp	.+24     	; 0x3fc <DIO_Write+0xa4>
			{
				PORTC &=~(1<<pinNum);
 3e4:	25 b3       	in	r18, 0x15	; 21
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_Write+0x98>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_Write+0x94>
 3f4:	80 95       	com	r24
 3f6:	82 23       	and	r24, r18
 3f8:	85 bb       	out	0x15, r24	; 21
 3fa:	08 95       	ret
			}
			else if (value == HIGH)
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	29 f5       	brne	.+74     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			{
				PORTC |=(1<<pinNum);
 400:	25 b3       	in	r18, 0x15	; 21
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	82 2b       	or	r24, r18
 412:	85 bb       	out	0x15, r24	; 21
 414:	08 95       	ret
			}
			break;
		case PORT_D:
			if(value == LOW)
 416:	41 11       	cpse	r20, r1
 418:	0c c0       	rjmp	.+24     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				PORTD &=~(1<<pinNum);
 41a:	22 b3       	in	r18, 0x12	; 18
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	80 95       	com	r24
 42c:	82 23       	and	r24, r18
 42e:	82 bb       	out	0x12, r24	; 18
 430:	08 95       	ret
			}
			else if (value == HIGH)
 432:	41 30       	cpi	r20, 0x01	; 1
 434:	51 f4       	brne	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			{
				PORTD |=(1<<pinNum);
 436:	22 b3       	in	r18, 0x12	; 18
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	82 2b       	or	r24, r18
 448:	82 bb       	out	0x12, r24	; 18
 44a:	08 95       	ret

0000044c <buttonInterrupt>:

#include "INTERRUPT.h"

void buttonInterrupt()
{
	Enable_Global_Interrupt();
 44c:	78 94       	sei
	MCUCR |= (1<<1);
 44e:	85 b7       	in	r24, 0x35	; 53
 450:	82 60       	ori	r24, 0x02	; 2
 452:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<6);
 454:	8b b7       	in	r24, 0x3b	; 59
 456:	80 64       	ori	r24, 0x40	; 64
 458:	8b bf       	out	0x3b, r24	; 59
 45a:	08 95       	ret

0000045c <delayTimer>:
#include "TIMER.h"

void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
 45c:	83 b7       	in	r24, 0x33	; 51
 45e:	85 60       	ori	r24, 0x05	; 5
 460:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 245;
 462:	85 ef       	ldi	r24, 0xF5	; 245
 464:	82 bf       	out	0x32, r24	; 50

#include "TIMER.h"

void delayTimer()
{
	int overFlowCounter = 0;
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 46a:	09 c0       	rjmp	.+18     	; 0x47e <delayTimer+0x22>
	{
		while ((TIFR & (1<<0)) == 0);
 46c:	08 b6       	in	r0, 0x38	; 56
 46e:	00 fe       	sbrs	r0, 0
 470:	fd cf       	rjmp	.-6      	; 0x46c <delayTimer+0x10>
		TIFR |= (1<<0);
 472:	88 b7       	in	r24, 0x38	; 56
 474:	81 60       	ori	r24, 0x01	; 1
 476:	88 bf       	out	0x38, r24	; 56
		overFlowCounter++;
 478:	2f 5f       	subi	r18, 0xFF	; 255
 47a:	3f 4f       	sbci	r19, 0xFF	; 255
		TCNT0 = 0;
 47c:	12 be       	out	0x32, r1	; 50
void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 47e:	24 31       	cpi	r18, 0x14	; 20
 480:	31 05       	cpc	r19, r1
 482:	a4 f3       	brlt	.-24     	; 0x46c <delayTimer+0x10>
		while ((TIFR & (1<<0)) == 0);
		TIFR |= (1<<0);
		overFlowCounter++;
		TCNT0 = 0;
	}
	TCCR0 = 0x00;
 484:	13 be       	out	0x33, r1	; 51
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>

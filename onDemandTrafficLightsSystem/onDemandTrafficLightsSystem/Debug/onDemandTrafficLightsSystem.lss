
onDemandTrafficLightsSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd9  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000801  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076f  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000397  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002c01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 41 01 	call	0x282	; 0x282 <main>
  74:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <appMain>:

int mode = 0 , enableInterrupt = 0;
void appMain()
{
	
	ledInit(PORT_A,0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 35 01 	call	0x26a	; 0x26a <ledInit>
	ledInit(PORT_A,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 35 01 	call	0x26a	; 0x26a <ledInit>
	ledInit(PORT_A,2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 35 01 	call	0x26a	; 0x26a <ledInit>
	ledInit(PORT_B,0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 35 01 	call	0x26a	; 0x26a <ledInit>
	ledInit(PORT_B,1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 35 01 	call	0x26a	; 0x26a <ledInit>
	ledInit(PORT_B,2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 35 01 	call	0x26a	; 0x26a <ledInit>
	buttonInit(PORT_D,2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 31 01 	call	0x262	; 0x262 <buttonInit>
	
	buttonInterrupt();
  b4:	0e 94 38 02 	call	0x470	; 0x470 <buttonInterrupt>
	
	
	/* Replace with your application code */
	while (1)
	{
		if(mode == 0)
  b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mode>
  bc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <mode+0x1>
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	e1 f4       	brne	.+56     	; 0xfc <appMain+0x80>
		{
			ledOn(PORT_A,0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			ledOn(PORT_B,2);
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			delayTimer();
  d4:	0e 94 40 02 	call	0x480	; 0x480 <delayTimer>
			ledOff(PORT_A,0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			ledOff(PORT_B,2);
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	82 e4       	ldi	r24, 0x42	; 66
  e4:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			mode++;
  e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mode>
  ec:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <mode+0x1>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <mode+0x1>
  f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mode>
  fa:	de cf       	rjmp	.-68     	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 1)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	39 f5       	brne	.+78     	; 0x150 <appMain+0xd4>
		{
			if(enableInterrupt == 1)
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	29 f4       	brne	.+10     	; 0x118 <appMain+0x9c>
			{
				Enable_Global_Interrupt();
 10e:	78 94       	sei
				enableInterrupt = 0;
 110:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 114:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			ledOn(PORT_A,1);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			ledOn(PORT_B,1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	82 e4       	ldi	r24, 0x42	; 66
 124:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			delayTimer();
 128:	0e 94 40 02 	call	0x480	; 0x480 <delayTimer>
			ledOff(PORT_A,1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			ledOff(PORT_B,1);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			mode++;
 13c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mode>
 140:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <mode+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <mode+0x1>
 14a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mode>
 14e:	b4 cf       	rjmp	.-152    	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 2)
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	91 05       	cpc	r25, r1
 154:	e1 f4       	brne	.+56     	; 0x18e <appMain+0x112>
		{
			ledOn(PORT_A,2);
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	81 e4       	ldi	r24, 0x41	; 65
 15a:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			ledOn(PORT_B,0);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e4       	ldi	r24, 0x42	; 66
 162:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			delayTimer();
 166:	0e 94 40 02 	call	0x480	; 0x480 <delayTimer>
			ledOff(PORT_A,2);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			ledOff(PORT_B,0);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	82 e4       	ldi	r24, 0x42	; 66
 176:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			mode++;
 17a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mode>
 17e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <mode+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <mode+0x1>
 188:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mode>
 18c:	95 cf       	rjmp	.-214    	; 0xb8 <appMain+0x3c>
		}
		else if(mode == 3)
 18e:	03 97       	sbiw	r24, 0x03	; 3
 190:	09 f0       	breq	.+2      	; 0x194 <appMain+0x118>
 192:	92 cf       	rjmp	.-220    	; 0xb8 <appMain+0x3c>
		{
			ledOn(PORT_A,1);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			ledOn(PORT_B,1);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	82 e4       	ldi	r24, 0x42	; 66
 1a0:	0e 94 39 01 	call	0x272	; 0x272 <ledOn>
			delayTimer();
 1a4:	0e 94 40 02 	call	0x480	; 0x480 <delayTimer>
			ledOff(PORT_A,1);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e4       	ldi	r24, 0x41	; 65
 1ac:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			ledOff(PORT_B,1);
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	82 e4       	ldi	r24, 0x42	; 66
 1b4:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
			mode = 0;
 1b8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <mode+0x1>
 1bc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <mode>
 1c0:	7b cf       	rjmp	.-266    	; 0xb8 <appMain+0x3c>

000001c2 <__vector_1>:
		}
	}
}

ISR(__vector_1 )
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if(mode == 1 || mode == 2)
 1e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mode>
 1e8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <mode+0x1>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	02 97       	sbiw	r24, 0x02	; 2
 1f0:	38 f5       	brcc	.+78     	; 0x240 <__vector_1+0x7e>
	{
		ledOff(PORT_A,0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
		ledOff(PORT_A,1);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
		ledOff(PORT_A,2);
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
		ledOff(PORT_B,0);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	82 e4       	ldi	r24, 0x42	; 66
 20e:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
		ledOff(PORT_B,1);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	82 e4       	ldi	r24, 0x42	; 66
 216:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
		ledOff(PORT_B,2);
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	0e 94 3d 01 	call	0x27a	; 0x27a <ledOff>
		mode = 3;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <mode+0x1>
 22a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mode>
		Disable_Global_Interrupt();
 22e:	f8 94       	cli
		enableInterrupt = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 238:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		main();
 23c:	0e 94 41 01 	call	0x282	; 0x282 <main>
	}
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <buttonInit>:

#include "BUTTON.h"

void buttonInit(uint8_t portNum , uint8_t buttonNum)
{
	DIO_INIT(portNum,buttonNum,IN);
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	0e 94 44 01 	call	0x288	; 0x288 <DIO_INIT>
 268:	08 95       	ret

0000026a <ledInit>:
 */ 

#include "LED.h"
void ledInit(uint8_t portNum , uint8_t ledNum)
{
	DIO_INIT(portNum,ledNum,OUT);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	0e 94 44 01 	call	0x288	; 0x288 <DIO_INIT>
 270:	08 95       	ret

00000272 <ledOn>:
}
void ledOn(uint8_t portNum , uint8_t ledNum)
{
	DIO_Write(portNum,ledNum,HIGH);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	0e 94 be 01 	call	0x37c	; 0x37c <DIO_Write>
 278:	08 95       	ret

0000027a <ledOff>:
}
void ledOff(uint8_t portNum , uint8_t ledNum)
{
	DIO_Write(portNum,ledNum,LOW);
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	0e 94 be 01 	call	0x37c	; 0x37c <DIO_Write>
 280:	08 95       	ret

00000282 <main>:

int main(void)
{
	while(1)
	{
		appMain();
 282:	0e 94 3e 00 	call	0x7c	; 0x7c <appMain>
 286:	fd cf       	rjmp	.-6      	; 0x282 <main>

00000288 <DIO_INIT>:



void DIO_INIT(uint8_t portNum , uint8_t pinNum , uint8_t direction)
{
	switch (portNum)
 288:	82 34       	cpi	r24, 0x42	; 66
 28a:	31 f1       	breq	.+76     	; 0x2d8 <DIO_INIT+0x50>
 28c:	18 f4       	brcc	.+6      	; 0x294 <DIO_INIT+0xc>
 28e:	81 34       	cpi	r24, 0x41	; 65
 290:	39 f0       	breq	.+14     	; 0x2a0 <DIO_INIT+0x18>
 292:	08 95       	ret
 294:	83 34       	cpi	r24, 0x43	; 67
 296:	e1 f1       	breq	.+120    	; 0x310 <DIO_INIT+0x88>
 298:	84 34       	cpi	r24, 0x44	; 68
 29a:	09 f4       	brne	.+2      	; 0x29e <DIO_INIT+0x16>
 29c:	54 c0       	rjmp	.+168    	; 0x346 <DIO_INIT+0xbe>
 29e:	08 95       	ret
	{
		case PORT_A:
			if(direction == IN)
 2a0:	41 11       	cpse	r20, r1
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <DIO_INIT+0x34>
			{
				DDRA &=~(1<<pinNum);
 2a4:	2a b3       	in	r18, 0x1a	; 26
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_INIT+0x28>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_INIT+0x24>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	8a bb       	out	0x1a, r24	; 26
 2ba:	08 95       	ret
			}
			else if (direction == OUT)
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	09 f0       	breq	.+2      	; 0x2c2 <DIO_INIT+0x3a>
 2c0:	5c c0       	rjmp	.+184    	; 0x37a <DIO_INIT+0xf2>
			{
				DDRA |=(1<<pinNum);
 2c2:	2a b3       	in	r18, 0x1a	; 26
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_INIT+0x46>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_INIT+0x42>
 2d2:	82 2b       	or	r24, r18
 2d4:	8a bb       	out	0x1a, r24	; 26
 2d6:	08 95       	ret
			}
			break;
		case PORT_B:
			if(direction == IN)
 2d8:	41 11       	cpse	r20, r1
 2da:	0c c0       	rjmp	.+24     	; 0x2f4 <DIO_INIT+0x6c>
			{
				DDRB &=~(1<<pinNum);
 2dc:	27 b3       	in	r18, 0x17	; 23
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_INIT+0x60>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_INIT+0x5c>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	87 bb       	out	0x17, r24	; 23
 2f2:	08 95       	ret
			}
			else if (direction == OUT)
 2f4:	41 30       	cpi	r20, 0x01	; 1
 2f6:	09 f0       	breq	.+2      	; 0x2fa <DIO_INIT+0x72>
 2f8:	40 c0       	rjmp	.+128    	; 0x37a <DIO_INIT+0xf2>
			{
				DDRB |=(1<<pinNum);
 2fa:	27 b3       	in	r18, 0x17	; 23
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_INIT+0x7e>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_INIT+0x7a>
 30a:	82 2b       	or	r24, r18
 30c:	87 bb       	out	0x17, r24	; 23
 30e:	08 95       	ret
			}
			break;
		case PORT_C:
			if(direction == IN)
 310:	41 11       	cpse	r20, r1
 312:	0c c0       	rjmp	.+24     	; 0x32c <DIO_INIT+0xa4>
			{
				DDRC &=~(1<<pinNum);
 314:	24 b3       	in	r18, 0x14	; 20
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_INIT+0x98>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_INIT+0x94>
 324:	80 95       	com	r24
 326:	82 23       	and	r24, r18
 328:	84 bb       	out	0x14, r24	; 20
 32a:	08 95       	ret
			}
			else if (direction == OUT)
 32c:	41 30       	cpi	r20, 0x01	; 1
 32e:	29 f5       	brne	.+74     	; 0x37a <DIO_INIT+0xf2>
			{
				DDRC |=(1<<pinNum);
 330:	24 b3       	in	r18, 0x14	; 20
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_INIT+0xb4>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_INIT+0xb0>
 340:	82 2b       	or	r24, r18
 342:	84 bb       	out	0x14, r24	; 20
 344:	08 95       	ret
			}
			break;
		case PORT_D:
			if(direction == IN)
 346:	41 11       	cpse	r20, r1
 348:	0c c0       	rjmp	.+24     	; 0x362 <DIO_INIT+0xda>
			{
				DDRD &=~(1<<pinNum);
 34a:	21 b3       	in	r18, 0x11	; 17
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_INIT+0xce>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_INIT+0xca>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	81 bb       	out	0x11, r24	; 17
 360:	08 95       	ret
			}
			else if (direction == OUT)
 362:	41 30       	cpi	r20, 0x01	; 1
 364:	51 f4       	brne	.+20     	; 0x37a <DIO_INIT+0xf2>
			{
				DDRD |=(1<<pinNum);
 366:	21 b3       	in	r18, 0x11	; 17
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_INIT+0xea>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_INIT+0xe6>
 376:	82 2b       	or	r24, r18
 378:	81 bb       	out	0x11, r24	; 17
 37a:	08 95       	ret

0000037c <DIO_Write>:
	}
}

void DIO_Write(uint8_t portNum , uint8_t pinNum , uint8_t value)
{
	switch (portNum)
 37c:	82 34       	cpi	r24, 0x42	; 66
 37e:	31 f1       	breq	.+76     	; 0x3cc <DIO_Write+0x50>
 380:	18 f4       	brcc	.+6      	; 0x388 <DIO_Write+0xc>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	39 f0       	breq	.+14     	; 0x394 <DIO_Write+0x18>
 386:	08 95       	ret
 388:	83 34       	cpi	r24, 0x43	; 67
 38a:	e1 f1       	breq	.+120    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 38c:	84 34       	cpi	r24, 0x44	; 68
 38e:	09 f4       	brne	.+2      	; 0x392 <DIO_Write+0x16>
 390:	54 c0       	rjmp	.+168    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 392:	08 95       	ret
	{
		case PORT_A:
			if(value == LOW)
 394:	41 11       	cpse	r20, r1
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <DIO_Write+0x34>
			{
				PORTA &=~(1<<pinNum);
 398:	2b b3       	in	r18, 0x1b	; 27
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_Write+0x28>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_Write+0x24>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	8b bb       	out	0x1b, r24	; 27
 3ae:	08 95       	ret
			}
			else if (value == HIGH)
 3b0:	41 30       	cpi	r20, 0x01	; 1
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <DIO_Write+0x3a>
 3b4:	5c c0       	rjmp	.+184    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				PORTA |=(1<<pinNum);
 3b6:	2b b3       	in	r18, 0x1b	; 27
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_Write+0x46>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_Write+0x42>
 3c6:	82 2b       	or	r24, r18
 3c8:	8b bb       	out	0x1b, r24	; 27
 3ca:	08 95       	ret
			}
			break;
		case PORT_B:
			if(value == LOW)
 3cc:	41 11       	cpse	r20, r1
 3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <DIO_Write+0x6c>
			{
				PORTB &=~(1<<pinNum);
 3d0:	28 b3       	in	r18, 0x18	; 24
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_Write+0x60>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_Write+0x5c>
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	88 bb       	out	0x18, r24	; 24
 3e6:	08 95       	ret
			}
			else if (value == HIGH)
 3e8:	41 30       	cpi	r20, 0x01	; 1
 3ea:	09 f0       	breq	.+2      	; 0x3ee <DIO_Write+0x72>
 3ec:	40 c0       	rjmp	.+128    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				PORTB |=(1<<pinNum);
 3ee:	28 b3       	in	r18, 0x18	; 24
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_Write+0x7e>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_Write+0x7a>
 3fe:	82 2b       	or	r24, r18
 400:	88 bb       	out	0x18, r24	; 24
 402:	08 95       	ret
			}
			break;
		case PORT_C:
			if(value == LOW)
 404:	41 11       	cpse	r20, r1
 406:	0c c0       	rjmp	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			{
				PORTC &=~(1<<pinNum);
 408:	25 b3       	in	r18, 0x15	; 21
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	82 23       	and	r24, r18
 41c:	85 bb       	out	0x15, r24	; 21
 41e:	08 95       	ret
			}
			else if (value == HIGH)
 420:	41 30       	cpi	r20, 0x01	; 1
 422:	29 f5       	brne	.+74     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				PORTC |=(1<<pinNum);
 424:	25 b3       	in	r18, 0x15	; 21
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	82 2b       	or	r24, r18
 436:	85 bb       	out	0x15, r24	; 21
 438:	08 95       	ret
			}
			break;
		case PORT_D:
			if(value == LOW)
 43a:	41 11       	cpse	r20, r1
 43c:	0c c0       	rjmp	.+24     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				PORTD &=~(1<<pinNum);
 43e:	22 b3       	in	r18, 0x12	; 18
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	82 23       	and	r24, r18
 452:	82 bb       	out	0x12, r24	; 18
 454:	08 95       	ret
			}
			else if (value == HIGH)
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	51 f4       	brne	.+20     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				PORTD |=(1<<pinNum);
 45a:	22 b3       	in	r18, 0x12	; 18
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	82 2b       	or	r24, r18
 46c:	82 bb       	out	0x12, r24	; 18
 46e:	08 95       	ret

00000470 <buttonInterrupt>:

#include "INTERRUPT.h"

void buttonInterrupt()
{
	Enable_Global_Interrupt();
 470:	78 94       	sei
	MCUCR |= (1<<1);
 472:	85 b7       	in	r24, 0x35	; 53
 474:	82 60       	ori	r24, 0x02	; 2
 476:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<6);
 478:	8b b7       	in	r24, 0x3b	; 59
 47a:	80 64       	ori	r24, 0x40	; 64
 47c:	8b bf       	out	0x3b, r24	; 59
 47e:	08 95       	ret

00000480 <delayTimer>:
#include "TIMER.h"

void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
 480:	83 b7       	in	r24, 0x33	; 51
 482:	85 60       	ori	r24, 0x05	; 5
 484:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 245;
 486:	85 ef       	ldi	r24, 0xF5	; 245
 488:	82 bf       	out	0x32, r24	; 50

#include "TIMER.h"

void delayTimer()
{
	int overFlowCounter = 0;
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 48e:	09 c0       	rjmp	.+18     	; 0x4a2 <delayTimer+0x22>
	{
		while ((TIFR & (1<<0)) == 0);
 490:	08 b6       	in	r0, 0x38	; 56
 492:	00 fe       	sbrs	r0, 0
 494:	fd cf       	rjmp	.-6      	; 0x490 <delayTimer+0x10>
		TIFR |= (1<<0);
 496:	88 b7       	in	r24, 0x38	; 56
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	88 bf       	out	0x38, r24	; 56
		overFlowCounter++;
 49c:	2f 5f       	subi	r18, 0xFF	; 255
 49e:	3f 4f       	sbci	r19, 0xFF	; 255
		TCNT0 = 0;
 4a0:	12 be       	out	0x32, r1	; 50
void delayTimer()
{
	int overFlowCounter = 0;
	TCCR0 |= (1 << 2)|(1 << 0);
	TCNT0 = 245;
	while (overFlowCounter < numberOfOverFlows)
 4a2:	24 31       	cpi	r18, 0x14	; 20
 4a4:	31 05       	cpc	r19, r1
 4a6:	a4 f3       	brlt	.-24     	; 0x490 <delayTimer+0x10>
		while ((TIFR & (1<<0)) == 0);
		TIFR |= (1<<0);
		overFlowCounter++;
		TCNT0 = 0;
	}
	TCCR0 = 0x00;
 4a8:	13 be       	out	0x33, r1	; 51
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
